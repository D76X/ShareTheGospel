@using System.Drawing
@inject IJSRuntime JSRunTime 

<h2>Call Instance .Net Method from JavaScript</h2>
<div>Window size received from JavaScript: @_windowSize.Width x @_windowSize.Height</div>
<button class="btn-secondary" @onclick="PassDotNetInstanceToJavaScript">
	Call .Net instance method!
</button>

@code {

	private Size _windowSize;
	
	private async Task PassDotNetInstanceToJavaScript()
	{
		/*
		Simply passing the * this * reference here wod pass to the JavaScript
		Runtime an object on which the properties of the .Net Component instance
		are provided.
		*/
		var dotNetObjectReference = DotNetObjectReference.Create(this);
		await JSRunTime.InvokeVoidAsync(
			"blazorInterop.callInstanceDotNetMethod",
			dotNetObjectReference);
	}

	[JSInvokable]
	public void SetWindowSize(Size windowSize)
	{
		_windowSize = windowSize;
		
		/*
		When JS calls .Net instance methods that may cause the state of the
		component and this change must be reflected in the UI then to force
		a new rendering of the Blazor component a call to StateHasChanged is 
		required.
		*/
		StateHasChanged();
	}
}
